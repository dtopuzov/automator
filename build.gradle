plugins {
    id 'java'
    id 'checkstyle'
    id "io.qameta.allure" version "2.8.1"
    id 'com.adarshr.test-logger' version '2.0.0'
}

group 'org.openset'
version '1.0-SNAPSHOT'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

allure {
    autoconfigure = true
    version = '2.7.0'
    downloadLink = 'https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/2.7.0/allure-2.7.0.zip'
    useJUnit5 {
        version = '2.13.1'
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'
    implementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.6.0'
    implementation group: 'io.appium', name: 'java-client', version: '7.3.0'
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '3.8.1'
    implementation group: 'org.awaitility', name: 'awaitility', version: '4.0.2'
    implementation group: 'com.sikulix', name: 'sikulixapi', version: '2.0.3'
    implementation 'io.qameta.allure:allure-junit5:2.13.1'
    implementation('org.aspectj:aspectjweaver') {
        version {
            strictly '1.9.5'
        }
    }
}

test {
    useJUnitPlatform()

    maxHeapSize = '1G'
    int cores = Integer.valueOf(System.getProperty("cores", String.valueOf(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)))
    systemProperties = [
            'junit.jupiter.execution.parallel.enabled'                 : true,
            'junit.jupiter.execution.parallel.mode.default'            : 'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': cores,
            'config'                                                   : System.getProperty("config")
    ]

    // Settings for test-logger gradle plugin.
    // See: https://github.com/radarsh/gradle-test-logger-plugin
    testlogger {
        theme 'standard-parallel'
        showExceptions true
        showStackTraces true
        showFullStackTraces false
        showCauses true
        slowThreshold 2000
        showSummary true
        showSimpleNames false
        showPassed true
        showSkipped true
        showFailed true
        showStandardStreams false
        showPassedStandardStreams true
        showSkippedStandardStreams true
        showFailedStandardStreams true
    }

    testLogging {
        //noinspection GrUnresolvedAccess
        events 'PASSED', 'FAILED', 'SKIPPED'
        showStandardStreams = false
    }

    reports {
        junitXml.enabled = true
        html.enabled = true
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

task uberJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}
